1) StoreHeader.tsx (drop-in)
import { useEffect, useState } from "react";
import { BadgeCheck, Share2, MessageCircle, Package, CreditCard, Truck } from "lucide-react";

type Props = {
  name: string;
  description?: string;
  logoUrl?: string;
  productsCount: number;
  paymentsCount: number;
  deliveriesCount: number;
  instagramUrl?: string;
  facebookUrl?: string;
  onShare: () => void;      // WhatsApp share
  onContact?: () => void;   // WhatsApp contact (optional)
};

export default function StoreHeader({
  name,
  description,
  logoUrl,
  productsCount,
  paymentsCount,
  deliveriesCount,
  instagramUrl,
  facebookUrl,
  onShare,
  onContact,
}: Props) {
  const [stuck, setStuck] = useState(false);
  useEffect(() => {
    const onScroll = () => setStuck(window.scrollY > 24);
    onScroll();
    window.addEventListener("scroll", onScroll, { passive: true });
    return () => window.removeEventListener("scroll", onScroll);
  }, []);

  return (
    <header className="relative">
      {/* compact cover */}
      <div className="h-40 w-full rounded-b-3xl bg-[radial-gradient(1200px_600px_at_10%_-10%,#EAF2FF_0%,transparent_60%),linear-gradient(135deg,#2563EB_0%,#4F46E5_55%,#EC4899_100%)]" />

      <div className="-mt-10 px-6">
        <div className="mx-auto max-w-7xl">
          {/* brand bar */}
          <div
            className={[
              "rounded-2xl border bg-white/60 backdrop-blur-2xl",
              "border-white/60 shadow-[0_8px_26px_rgba(2,6,23,.06)]",
              stuck ? "sticky top-4 z-30" : "",
            ].join(" ")}
          >
            <div className="flex flex-col gap-5 p-5 md:flex-row md:items-center md:justify-between">
              {/* left */}
              <div className="flex min-w-0 items-center gap-4">
                <div className="h-14 w-14 shrink-0 overflow-hidden rounded-xl border border-white/70 bg-white">
                  {logoUrl ? (
                    <img src={logoUrl} alt={`${name} logo`} className="h-full w-full object-cover" />
                  ) : (
                    <div className="grid h-full w-full place-items-center text-base font-bold text-slate-700">
                      {name?.slice(0, 1) || "S"}
                    </div>
                  )}
                </div>
                <div className="min-w-0">
                  <div className="flex items-center gap-2">
                    <h1 className="truncate text-xl font-black tracking-tight text-slate-900">{name}</h1>
                    <BadgeCheck className="h-5 w-5 text-blue-600" />
                  </div>
                  {description && (
                    <p className="mt-0.5 line-clamp-1 text-sm text-slate-600">{description}</p>
                  )}
                </div>
              </div>

              {/* mid chips */}
              <div className="flex flex-wrap items-center gap-2">
                <GlassChip icon={<Package className="h-4 w-4" />} label={`${productsCount} ${productsCount === 1 ? "Product" : "Products"}`} />
                <GlassChip icon={<CreditCard className="h-4 w-4" />} label={`${paymentsCount} Payment Methods`} />
                <GlassChip icon={<Truck className="h-4 w-4" />} label={`${deliveriesCount} Delivery Options`} />
              </div>

              {/* right: socials (unchanged look) + CTAs */}
              <div className="flex items-center gap-2">
                {instagramUrl && <SocialCircle brand="ig" href={instagramUrl} />}
                {facebookUrl && <SocialCircle brand="fb" href={facebookUrl} />}

                <button
                  onClick={onShare}
                  className="inline-flex items-center gap-2 rounded-xl bg-slate-900 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-slate-800"
                >
                  <Share2 className="h-4 w-4" />
                  Share
                </button>
                {onContact && (
                  <button
                    onClick={onContact}
                    className="inline-flex items-center gap-2 rounded-xl border border-slate-200 bg-white px-4 py-2 text-sm font-semibold text-slate-800 hover:border-blue-300"
                  >
                    <MessageCircle className="h-4 w-4" />
                    Contact
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}

function GlassChip({ icon, label }: { icon: React.ReactNode; label: string }) {
  return (
    <div className="inline-flex items-center gap-2 rounded-xl border border-white/70 bg-white/70 px-3.5 py-2 text-sm font-medium text-slate-800 backdrop-blur-2xl shadow-sm">
      {icon}
      <span>{label}</span>
    </div>
  );
}

function SocialCircle({ brand, href }: { brand: "ig" | "fb"; href: string }) {
  const cls =
    brand === "ig"
      ? "bg-[radial-gradient(circle_at_30%_107%,#fdf497_0%,#fdf497_5%,#fd5949_45%,#d6249f_60%,#285AEB_90%)]"
      : "bg-[#1877F2]";
  const label = brand === "ig" ? "Instagram" : "Facebook";
  return (
    <a
      href={href}
      target="_blank"
      rel="noreferrer"
      aria-label={label}
      className={`grid h-10 w-10 place-items-center rounded-full text-white shadow-sm ${cls}`}
    >
      <span className="sr-only">{label}</span>
      {/* keep your existing IG/FB glyphs inside if you have custom ones */}
    </a>
  );
}

2) Minimal integration in your storefront page

Keep your product cards and filters as-is.

Remove the big “Discover Amazing Products” section.

Mount the header above the filter block.

Ensure only one filter row renders.

// inside PublicStorefrontAligned (near the top of the return), replace your current header block with:
<StoreHeader
  name={seller.storeName || "Store"}
  description={seller.storeDescription}
  logoUrl={seller.logoUrl}
  productsCount={products.length}
  paymentsCount={normList(seller.paymentMethods).length}
  deliveriesCount={normList(seller.deliveryOptions).length}
  instagramUrl={normalizeSocialUrl(seller.socialMedia?.instagram, "instagram")}
  facebookUrl={normalizeSocialUrl(seller.socialMedia?.facebook, "facebook")}
  onShare={() => {
    const storeUrl = `${window.location.origin}/store/${seller.id}`;
    const text = `Check out my ${seller.storeName || "ShopLynk"} store: ${storeUrl}`;
    window.open(`https://wa.me/?text=${encodeURIComponent(text)}`, "_blank", "noopener,noreferrer");
  }}
  onContact={seller.whatsappNumber ? () => {
    const msg = `Hi ${seller.storeName || "there"}! I'm interested in your products.`;
    const digits = seller.whatsappNumber.replace(/[^\d+]/g, "");
    window.open(`https://wa.me/${digits.replace(/^\+/, "")}?text=${encodeURIComponent(msg)}`, "_blank", "noopener,noreferrer");
  } : undefined}
/>

// then go straight into your existing Search & Filters block.
// Delete/disable any second/legacy filter container to avoid duplication.