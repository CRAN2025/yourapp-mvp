import { useEffect } from 'react';
import { useLocation } from 'wouter';
import { useAuthContext } from '@/context/AuthContext';
import {
  Package,
  Eye,
  BarChart3,
  Settings,
  MessageCircle,
  CheckCircle2
} from 'lucide-react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import DashboardLayout from '@/components/Layout/DashboardLayout';
import LoadingSpinner from '@/components/LoadingSpinner';

export default function SellerDashboard() {
  const { user, seller, loading } = useAuthContext();
  const [, navigate] = useLocation();

  useEffect(() => {
    if (!loading && !user) {
      navigate('/auth?mode=signin&redirect=/seller-dashboard');
    }
  }, [user, loading, navigate]);

  if (loading) {
    return (
      <div className="min-h-screen grid place-items-center">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  if (!user || !seller) return null;

  const actions = [
    {
      title: 'Manage Products',
      desc: 'Add, edit, or remove products from your store',
      icon: Package,
      cta: 'Open Products',
      href: '/products'
    },
    {
      title: 'View Storefront',
      desc: 'See how your store looks to customers',
      icon: Eye,
      cta: 'View Storefront',
      href: '/storefront'
    },
    {
      title: 'Analytics',
      desc: 'Track views, clicks, and performance',
      icon: BarChart3,
      cta: 'View Analytics',
      href: '/analytics'
    },
    {
      title: 'Store Settings',
      desc: 'Update store info and preferences',
      icon: Settings,
      cta: 'Open Settings',
      href: '/settings'
    }
  ] as const;

  const storeUrl = `${window.location.origin}/store/${seller.id}`;
  const shareText = `Check out my ${seller.storeName || 'ShopLynk'} store: ${storeUrl}`;

  const shareLink = () => {
    if (navigator.share && typeof navigator.share === 'function') {
      navigator.share({ title: seller.storeName || 'My Store', text: shareText, url: storeUrl }).catch(() => {});
    } else {
      const wa = `https://wa.me/?text=${encodeURIComponent(shareText)}`;
      window.open(wa, '_blank', 'noopener,noreferrer');
    }
  };

  const copyLink = async () => {
    try {
      await navigator.clipboard.writeText(storeUrl);
    } catch {
      window.prompt('Copy your store link:', storeUrl);
    }
  };

  return (
    // hideTopNav removes the global navbar so this page matches your preferred layout
    <DashboardLayout hideTopNav>
      <div className="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8 py-6 space-y-6">
        {/* Welcome card (matches screenshot styling) */}
        <div className="rounded-2xl border border-slate-200 bg-white p-6 md:p-8 shadow-sm">
          <h1 className="text-3xl md:text-4xl font-extrabold tracking-tight text-slate-900">
            Welcome, {seller.storeName || 'Seller'}!
          </h1>

          <div className="mt-3 text-sm text-slate-600">
            <div className="font-medium">
              Store: <span className="text-slate-900">{seller.storeName || 'Your Store'}</span>
            </div>
            <div className="mt-1 flex items-center gap-2">
              <span className="text-slate-500">User ID:</span>
              <span className="font-mono text-slate-800">{user?.uid}</span>
              <span className="mx-2 text-slate-300">â€¢</span>
              {seller.onboardingCompleted ? (
                <span className="inline-flex items-center gap-1 text-emerald-700">
                  <CheckCircle2 className="h-4 w-4" /> Onboarding: <strong>Complete</strong>
                </span>
              ) : (
                <span className="inline-flex items-center gap-1 text-amber-700">
                  <Settings className="h-4 w-4" /> Onboarding: <strong>Incomplete</strong>
                </span>
              )}
            </div>
          </div>
        </div>

        {/* Four tiles */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5">
          {actions.map(({ title, desc, icon: Icon, cta, href }) => (
            <Card
              key={href}
              className="border-slate-200 shadow-sm hover:shadow-md transition-shadow"
            >
              <CardHeader className="pb-4">
                <div className="w-11 h-11 rounded-xl bg-slate-50 border border-slate-200 grid place-items-center mb-3">
                  <Icon className="h-5 w-5 text-slate-600" />
                </div>
                <CardTitle className="text-lg text-slate-900">{title}</CardTitle>
                <CardDescription className="text-slate-600">{desc}</CardDescription>
              </CardHeader>
              <CardContent className="pt-0">
                <Button
                  onClick={() => navigate(href)}
                  variant="outline"
                  className="w-full border-slate-200"
                >
                  {cta}
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Public store link (Copy + Share Link) */}
        <Card className="border-slate-200 shadow-sm">
          <CardHeader>
            <CardTitle>Your Public Store Link</CardTitle>
            <CardDescription>Share this link with your customers</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col gap-3 sm:flex-row sm:items-center">
              <div className="flex-1 bg-slate-50 border border-slate-200 rounded-lg p-3 font-mono text-sm overflow-x-auto">
                {storeUrl}
              </div>
