// src/shared/seller.ts
export type PaymentMethod =
  | "Mobile Money"
  | "Card"
  | "Bank Transfer"
  | "Cash"
  | "PayPal"
  | string;

export type DeliveryOption =
  | "Pickup"
  | "Local Delivery"
  | "Courier"
  | "Nationwide"
  | "International"
  | string;

export type SocialMedia = {
  instagram?: string;
  facebook?: string;
  tiktok?: string;
};

export interface SellerV2 {
  id: string;
  storeName: string;

  fullName?: string;
  storeDescription?: string;
  logoUrl?: string;

  country?: string;           // ISO country name or code; friendly is fine
  currency?: string;          // e.g. "USD", "UGX"
  whatsappNumber?: string;    // best-effort E.164-ish normalization

  socialMedia?: SocialMedia;

  paymentMethods: PaymentMethod[];   // human-friendly strings
  deliveryOptions: DeliveryOption[]; // human-friendly strings

  onboardingCompleted?: boolean;

  createdAt: number;  // epoch ms
  updatedAt: number;  // epoch ms
}

/** ---------- helpers ---------- */
const ORDER_PAYMENT = [
  "Mobile Money", "Card", "Bank Transfer", "Cash", "PayPal"
];
const ORDER_DELIVERY = [
  "Pickup", "Local Delivery", "Courier", "Nationwide", "International"
];

const dedupe = (arr: string[]) => {
  const seen = new Set<string>();
  const out: string[] = [];
  for (const v of arr) {
    const key = v.trim().toLowerCase();
    if (!key || seen.has(key)) continue;
    seen.add(key);
    out.push(v.trim());
  }
  return out;
};

const fromMapOrArray = (value: unknown): string[] => {
  if (Array.isArray(value)) return dedupe(value.filter(Boolean).map(String));
  if (value && typeof value === "object") {
    return dedupe(
      Object.entries(value as Record<string, unknown>)
        .filter(([, v]) => !!v)
        .map(([k]) => k)
    );
  }
  return [];
};

const friendlyPayment = (v: string): string => {
  const x = v.trim().toLowerCase();
  if (["mobile","mobile money","momo","mpesa","airtel","telecom"].some(k => x.includes(k))) return "Mobile Money";
  if (["card","visa","mastercard","debit","credit"].some(k => x.includes(k))) return "Card";
  if (["bank","transfer","wire","eft"].some(k => x.includes(k))) return "Bank Transfer";
  if (["cash"].some(k => x.includes(k))) return "Cash";
  if (["paypal"].some(k => x.includes(k))) return "PayPal";
  return v.trim();
};

const friendlyDelivery = (v: string): string => {
  const x = v.trim().toLowerCase();
  if (["pickup","pick up","collect"].some(k => x.includes(k))) return "Pickup";
  if (["local"].some(k => x.includes(k))) return "Local Delivery";
  if (["courier","rider","bike"].some(k => x.includes(k))) return "Courier";
  if (["nationwide"].some(k => x.includes(k))) return "Nationwide";
  if (["international","worldwide","global"].some(k => x.includes(k))) return "International";
  return v.trim();
};

const sortByOrder = (order: string[]) => (a: string, b: string) => {
  const ai = order.findIndex(o => o.toLowerCase() === a.toLowerCase());
  const bi = order.findIndex(o => o.toLowerCase() === b.toLowerCase());
  return (ai === -1 ? 999 : ai) - (bi === -1 ? 999 : bi) || a.localeCompare(b);
};

const sanitizeUrl = (u?: string) => {
  if (!u) return undefined;
  const t = u.trim();
  if (!t || /^javascript:|^data:/i.test(t)) return undefined;
  return t;
};

const normalizeHandleToUrl = (value?: string, platform?: "instagram"|"facebook"|"tiktok") => {
  const safe = sanitizeUrl(value);
  if (!safe) return undefined;
  if (/^https?:\/\//i.test(safe)) return safe;

  const handle = safe.replace(/^@/, "");
  const enc = encodeURIComponent(handle);
  if (platform === "instagram") return `https://instagram.com/${enc}`;
  if (platform === "facebook")  return `https://facebook.com/${enc}`;
  if (platform === "tiktok")    return `https://www.tiktok.com/@${enc}`;
  return safe;
};

const phoneE164ish = (s?: string) => {
  if (!s) return undefined;
  const trimmed = s.trim();
  if (!trimmed) return undefined;
  // Keep digits and '+', collapse multiples of '+'
  const kept = trimmed.replace(/[^\d+]/g, "").replace(/(?!^)\+/g, "");
  return kept || undefined;
};

const toEpoch = (v: unknown, fallback: number) => {
  if (typeof v === "number" && Number.isFinite(v)) return v;
  if (typeof v === "string" && /^\d+$/.test(v)) return Number(v);
  if (v instanceof Date && !isNaN(v.getTime())) return v.getTime();
  return fallback;
};

/** ---------- main adapter ---------- */
export function normalizeSeller(input: any): SellerV2 {
  const now = Date.now();

  // ids & names (support legacy keys)
  const id = String(input?.id || input?.sellerId || input?.uid || "").trim();
  const storeName = String(input?.storeName || input?.name || "").trim();

  // core
  const fullName = input?.fullName ? String(input.fullName) : undefined;
  const storeDescription = input?.storeDescription ? String(input.storeDescription) : undefined;
  const logoUrl = sanitizeUrl(input?.logoUrl);

  const country = input?.country ? String(input.country) : undefined;
  const currency = input?.currency ? String(input.currency) : undefined;

  // social
  const socialMedia: SocialMedia | undefined = (() => {
    const ig = normalizeHandleToUrl(input?.socialMedia?.instagram ?? input?.instagram, "instagram");
    const fb = normalizeHandleToUrl(input?.socialMedia?.facebook  ?? input?.facebook,  "facebook");
    const tk = normalizeHandleToUrl(input?.socialMedia?.tiktok    ?? input?.tiktok,    "tiktok");
    if (ig || fb || tk) return { instagram: ig, facebook: fb, tiktok: tk };
    return undefined;
  })();

  // contact
  const whatsappNumber = phoneE164ish(input?.whatsappNumber ?? input?.whatsapp ?? input?.contact?.whatsapp);

  // payments / delivery
  const paymentMethodsRaw = fromMapOrArray(input?.paymentMethods);
  const deliveryOptionsRaw = fromMapOrArray(input?.deliveryOptions);

  const paymentMethods = dedupe(
    paymentMethodsRaw.map(friendlyPayment)
  ).sort(sortByOrder(ORDER_PAYMENT));

  const deliveryOptions = dedupe(
    deliveryOptionsRaw.map(friendlyDelivery)
  ).sort(sortByOrder(ORDER_DELIVERY));

  // flags
  const onboardingCompleted =
    typeof input?.onboardingCompleted === "boolean"
      ? input.onboardingCompleted
      : undefined;

  // timestamps
  const createdAt = toEpoch(input?.createdAt, now);
  const updatedAt = toEpoch(input?.updatedAt, createdAt);

  // final safe object (no passthrough of unknown fields)
  const out: SellerV2 = {
    id,
    storeName,

    fullName,
    storeDescription,
    logoUrl,

    country,
    currency,
    whatsappNumber,
    socialMedia,

    paymentMethods,
    deliveryOptions,

    onboardingCompleted,

    createdAt,
    updatedAt
  };

  // minimal invariants
  if (!out.id) throw new Error("Seller is missing id");
  if (!out.storeName) throw new Error("Seller is missing storeName");

  return out;
}
