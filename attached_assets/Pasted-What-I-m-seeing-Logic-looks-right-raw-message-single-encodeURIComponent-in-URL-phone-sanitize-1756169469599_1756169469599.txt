What I’m seeing

✅ Logic looks right: raw message → single encodeURIComponent in URL, phone sanitized to digits, mobile vs desktop routing, popup-safe window.open.

❗️Two problems in the snippet you pasted:

There’s a stray . after openWhatsApp(...) { ... } which will cause a syntax error.

You both import isMobileDevice from ./device and define/export it again below. That’s a duplicate definition and will break TS/ES builds (or shadow unexpectedly).

What to change

Keep device helpers in device.ts and do not re-declare them in whatsapp.ts.

Remove the stray . so the file parses.

Drop-in fixed files
src/lib/utils/whatsapp.ts
import { isMobileDevice } from './device';

/** Create WhatsApp message for product inquiry (RAW text) */
export function createWhatsAppMessage({
  storeName,
  productName,
  productId,
  url,
}: {
  storeName: string;
  productName: string;
  productId?: string;
  url?: string;
}): string {
  let message = `Hi! I'm interested in the "${productName}" from ${storeName}.`;
  if (url) message += `\n\nI found it here: ${url}`;
  if (productId) message += `\n\nProduct ID: ${productId}`;
  message += '\n\nCould you please provide more details?';
  return message; // raw text (do NOT encode here)
}

/** Generate a WhatsApp URL (mobile = wa.me, desktop = web.whatsapp.com) */
export function generateWhatsAppUrl(
  e164Number: string,
  message: string,
  forceMobile?: boolean
): string {
  const isMobile = forceMobile ?? isMobileDevice();
  const phone = String(e164Number || '').replace(/[^\d]/g, ''); // digits only
  const text = encodeURIComponent(message || '');
  return isMobile
    ? `https://wa.me/${phone}?text=${text}`
    : `https://web.whatsapp.com/send?phone=${phone}&text=${text}`;
}

/** Open WhatsApp with popup-safe fallback */
export function openWhatsApp(
  e164Number: string,
  message: string,
  forceMobile?: boolean
): void {
  const url = generateWhatsAppUrl(e164Number, message, forceMobile);
  const win = window.open(url, '_blank', 'noopener,noreferrer');
  if (!win) window.location.href = url;
}

src/lib/utils/device.ts
/** Detect if user is on a mobile device */
export function isMobileDevice(): boolean {
  if (typeof navigator === 'undefined') return false; // SSR safety
  return /Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
}

/** Get device type string for analytics */
export function getDeviceType(): 'mobile' | 'desktop' {
  return isMobileDevice() ? 'mobile' : 'desktop';
}

export function isIOS(): boolean {
  if (typeof navigator === 'undefined') return false;
  return /iPad|iPhone|iPod/.test(navigator.userAgent);
}

export function isAndroid(): boolean {
  if (typeof navigator === 'undefined') return false;
  return /Android/.test(navigator.userAgent);
}