import { useState, useEffect, useMemo } from 'react';
import { useRoute, useLocation, Link } from 'wouter';
import { ref, get } from 'firebase/database';
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { Search, Heart, MessageCircle, ChevronDown, X, ArrowLeft, CreditCard, Truck, MapPin, Phone, Info, Star, Clock, Globe, CheckCircle, Sparkles, Award, Shield, Zap, Share2, UserPlus, Filter, Instagram, Facebook } from 'lucide-react';
import StoreHeader from '@/components/StoreHeader';
import { database, auth as primaryAuth } from '@/lib/firebase';
import { formatPrice, getProductImageUrl } from '@/lib/utils/formatting';
import { trackInteraction } from '@/lib/utils/analytics';
import { openWhatsApp, createWhatsAppMessage } from '@/lib/utils/whatsapp';
import { ensureAnonymousEventsAuth } from '@/lib/firebaseEvents';
import type { Product, Seller } from '@shared/schema';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import PublicLayout from '@/components/Layout/PublicLayout';
import EmptyState from '@/components/EmptyState';
import LoadingSpinner from '@/components/LoadingSpinner';
import { useToast } from '@/hooks/use-toast';
import logoUrl from '@/assets/logo.png';

// Marketing URL for ShopLink promotion
const SHOPLINK_MARKETING_URL = import.meta.env.VITE_MARKETING_URL || 'https://shoplink.app';

// URL normalization for social media links
const normalizeUrl = (value: string, platform: 'instagram' | 'tiktok' | 'facebook'): string => {
  if (!value || typeof value !== 'string') return '';
  
  const trimmed = value.trim();
  if (!trimmed) return '';
  
  // Block unsafe URLs
  if (trimmed.toLowerCase().startsWith('javascript:') || trimmed.toLowerCase().startsWith('data:')) {
    return '';
  }
  
  // If already a full URL, use as-is
  if (trimmed.startsWith('http://') || trimmed.startsWith('https://')) {
    return trimmed;
  }
  
  // Handle-to-URL conversion
  let handle = trimmed;
  if (handle.startsWith('@')) {
    handle = handle.slice(1);
  }
  
  // Escape handle for URL safety
  const encodedHandle = encodeURIComponent(handle);
  
  switch (platform) {
    case 'instagram':
      return `https://instagram.com/${encodedHandle}`;
    case 'tiktok':
      return `https://www.tiktok.com/@${encodedHandle}`;
    case 'facebook':
      return `https://facebook.com/${encodedHandle}`;
    default:
      return '';
  }
};

// Championship-Grade Full-Width Container
const FullWidthContainer = ({ children, className = "" }: { children: React.ReactNode, className?: string }) => (
  <div className={`w-full max-w-[1600px] mx-auto px-8 md:px-16 lg:px-24 ${className}`}>
    {children}
  </div>
);

export default function StorefrontPublic() {
  const [, params] = useRoute('/store/:sellerId');
  const { toast } = useToast();
  const [seller, setSeller] = useState<Seller | null>(null);
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [sortBy, setSortBy] = useState('newest');
  const [showFavorites, setShowFavorites] = useState(false);
  const [favorites, setFavorites] = useState<Set<string>>(new Set());
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [showProductModal, setShowProductModal] = useState(false);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [showDeliveryModal, setShowDeliveryModal] = useState(false);
  const [contactNotification, setContactNotification] = useState<{show: boolean, product: Product | null}>({show: false, product: null});
  const [lowResImages, setLowResImages] = useState<Record<string, boolean>>({});
  const [isOwner, setIsOwner] = useState(false);

  const sellerId = params?.sellerId;
  const [location] = useLocation();

  // Owner detection and anonymous authentication for events
  useEffect(() => {
    ensureAnonymousEventsAuth();
    
    const unsubscribe = onAuthStateChanged(primaryAuth, (user) => {
      setIsOwner(!!user && user.uid === sellerId);
    });
    
    return () => unsubscribe();
  }, [sellerId]);

  // Enhanced image quality detection
  const MIN_WIDTH = 800;
  const MIN_HEIGHT = 600;
  
  const handleImageLoad = (productId: string, e: React.SyntheticEvent<HTMLImageElement>) => {
    const img = e.currentTarget;
    if (img.naturalWidth < MIN_WIDTH || img.naturalHeight < MIN_HEIGHT) {
      setLowResImages(prev => ({ ...prev, [productId]: true }));
    }
  };

  const PLACEHOLDER_IMAGE = '/placeholder-product.png';

  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement>) => {
    e.currentTarget.src = PLACEHOLDER_IMAGE;
  };

  // Memoized favorites key for proper sellerId-based loading
  const favKey = useMemo(() => `shoplink_favorites_${sellerId}`, [sellerId]);

  // Load favorites with enhanced error handling
  useEffect(() => {
    try {
      const saved = localStorage.getItem(favKey);
      setFavorites(saved ? new Set(JSON.parse(saved)) : new Set());
    } catch (error) {
      console.warn('Failed to load favorites from localStorage:', error);
      setFavorites(new Set());
      localStorage.removeItem(favKey);
    }
  }, [favKey]);

  // Track WhatsApp CTA views for analytics
  const trackWhatsAppView = async (productId: string) => {
    if (!sellerId || !seller?.whatsappNumber) return;
    
    try {
      await trackInteraction({
        type: 'wa_click',
        sellerId,
        productId,
        metadata: { location: 'card', action: 'whatsapp_cta_viewed' },
      });
    } catch (error) {
      console.warn('Failed to track WhatsApp CTA view:', error);
    }
  };

  // Enhanced product filtering with fuzzy search
  const filteredProducts = useMemo(() => {
    let filtered = products.filter((product) => {
      const searchTerms = searchQuery.toLowerCase().split(' ').filter(Boolean);
      const searchableText = [
        product.name,
        product.description,
        product.category,
        product.brand,
        product.material,
        product.color,
      ].filter(Boolean).join(' ').toLowerCase();
      
      const matchesSearch = searchTerms.length === 0 || 
        searchTerms.every(term => searchableText.includes(term));
      
      const matchesCategory = categoryFilter === 'all' || product.category === categoryFilter;
      const matchesFavorites = !showFavorites || favorites.has(product.id);
      
      return matchesSearch && matchesCategory && matchesFavorites;
    });

    switch (sortBy) {
      case 'price-low':
        filtered.sort((a, b) => a.price - b.price);
        break;
      case 'price-high':
        filtered.sort((a, b) => b.price - a.price);
        break;
      case 'name':
        filtered.sort((a, b) => a.name.localeCompare(b.name));
        break;
      case 'popular':
        filtered.sort((a, b) => {
          const aPopularity = ((a as any).analytics?.views || 0) + ((a as any).analytics?.favorites || 0);
          const bPopularity = ((b as any).analytics?.views || 0) + ((b as any).analytics?.favorites || 0);
          if (aPopularity !== bPopularity) return bPopularity - aPopularity;
          return (b.createdAt || 0) - (a.createdAt || 0);
        });
        break;
      case 'newest':
      default:
        filtered.sort((a, b) => (b.createdAt || 0) - (a.createdAt || 0));
        break;
    }

    return filtered;
  }, [products, searchQuery, categoryFilter, showFavorites, favorites, sortBy]);

  // Deep link: open product modal if URL has #productId
  useEffect(() => {
    if (!filteredProducts?.length) return;
    const id = window.location.hash?.slice(1);
    if (!id) return;
    const product = filteredProducts.find(p => p.id === id);
    if (product) {
      setSelectedProduct(product);
      setShowProductModal(true);
      
      trackInteraction({
        type: 'product_view',
        sellerId: sellerId!,
        productId: product.id,
        metadata: { source: 'deeplink' },
      }).catch(console.error);
    }
  }, [filteredProducts, sellerId]);

  // Enhanced keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        setShowProductModal(false);
        setShowPaymentModal(false);
        setShowDeliveryModal(false);
        setContactNotification({show: false, product: null});
        return;
      }
      
      if (showProductModal && selectedProduct) {
        const currentIndex = filteredProducts.findIndex(p => p.id === selectedProduct.id);
        if (e.key === 'ArrowLeft' && currentIndex > 0) {
          const prevProduct = filteredProducts[currentIndex - 1];
          setSelectedProduct(prevProduct);
          window.history.replaceState(null, '', `#${prevProduct.id}`);
        } else if (e.key === 'ArrowRight' && currentIndex < filteredProducts.length - 1) {
          const nextProduct = filteredProducts[currentIndex + 1];
          setSelectedProduct(nextProduct);
          window.history.replaceState(null, '', `#${nextProduct.id}`);
        }
      }
    };
    
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [showProductModal, selectedProduct, filteredProducts]);

  // Auto-dismiss notifications
  useEffect(() => {
    if (contactNotification.show) {
      const timer = setTimeout(() => {
        setContactNotification({show: false, product: null});
      }, 4500);
      return () => clearTimeout(timer);
    }
  }, [contactNotification.show]);

  // Enhanced data loading with retry logic
  useEffect(() => {
    if (!sellerId) return;

    let retryCount = 0;
    const maxRetries = 3;

    const loadStoreData = async (): Promise<void> => {
      try {
        setLoading(true);
        setError(null);

        const sellerRef = ref(database, `publicStores/${sellerId}/profile`);
        const sellerSnapshot = await Promise.race([
          get(sellerRef),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Request timeout')), 10000)
          )
        ]) as any;
        
        if (!sellerSnapshot.exists()) {
          setError('This store could not be found. It may have been removed or the link is incorrect.');
          return;
        }

        const sellerData = sellerSnapshot.val();
        
        if (!sellerData.storeName) {
          setError('Invalid store data. Please contact support.');
          return;
        }

        setSeller(sellerData);

        const productsRef = ref(database, `publicStores/${sellerId}/products`);
        const productsSnapshot = await Promise.race([
          get(productsRef),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Request timeout')), 10000)
          )
        ]) as any;

        let productsList: any[] = [];
        if (productsSnapshot.exists()) {
          const data = productsSnapshot.val();
          productsList = Object.entries(data)
            .map(([id, productData]: [string, any]) => ({
              id,
              ...productData,
            }))
            .filter((product: any) => 
              product.isActive && 
              product.quantity > 0 && 
              product.name && 
              product.price > 0
            );
          
          productsList.sort((a: any, b: any) => {
            if (a.featured !== b.featured) {
              return b.featured ? 1 : -1;
            }
            return (b.createdAt || 0) - (a.createdAt || 0);
          });
          
          setProducts(productsList);
        }

        await trackInteraction({
          type: 'store_view',
          sellerId,
          metadata: {
            storeName: sellerData.storeName,
            productCount: productsList.length,
          },
        });

      } catch (error) {
        console.error('Error loading store:', error);
        
        if (retryCount < maxRetries) {
          retryCount++;
          setTimeout(() => loadStoreData(), 1000 * retryCount);
          return;
        }
        
        setError('Unable to load store. Please check your connection and try again.');
      } finally {
        setLoading(false);
      }
    };

    loadStoreData();
  }, [sellerId]);

  // Enhanced category extraction
  const categories = useMemo(() => {
    const categoryCount = products.reduce((acc, product) => {
      acc[product.category] = (acc[product.category] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    return Object.entries(categoryCount)
      .sort(([,a], [,b]) => b - a)
      .map(([category]) => category);
  }, [products]);

  // Enhanced favorite toggling
  const toggleFavorite = async (productId: string, e?: React.MouseEvent) => {
    e?.stopPropagation();
    
    const newFavorites = new Set(favorites);
    const isAdding = !newFavorites.has(productId);
    
    if (isAdding) {
      newFavorites.add(productId);
    } else {
      newFavorites.delete(productId);
    }
    
    setFavorites(newFavorites);
    
    try {
      localStorage.setItem(favKey, JSON.stringify(Array.from(newFavorites)));
    } catch (error) {
      console.warn('Failed to save favorites:', error);
    }

    try {
      await trackInteraction({
        type: 'product_view',
        sellerId: sellerId!,
        productId,
        metadata: { action: isAdding ? 'favorite_add' : 'favorite_remove' },
      });
    } catch (error) {
      console.warn('Failed to track favorite action:', error);
    }

    if (e?.target) {
      const button = (e.target as HTMLElement).closest('button');
      if (button) {
        button.style.transform = 'scale(0.9)';
        button.style.transition = 'transform 0.15s ease-out';
        
        setTimeout(() => {
          button.style.transform = 'scale(1.1)';
          setTimeout(() => {
            button.style.transform = 'scale(1)';
            button.style.transition = '';
          }, 150);
        }, 150);
      }
    }
  };

  // Enhanced product view
  const handleProductView = async (product: Product) => {
    try {
      await trackInteraction({
        type: 'product_view',
        sellerId: sellerId!,
        productId: product.id,
        metadata: {
          productName: product.name,
          productPrice: product.price,
          category: product.category,
          viewSource: 'grid',
        },
      });
      
      setSelectedProduct(product);
      setShowProductModal(true);
      
      window.history.pushState(null, '', `#${product.id}`);
    } catch (error) {
      console.error('Error tracking product view:', error);
      setSelectedProduct(product);
      setShowProductModal(true);
    }
  };

  // Enhanced product contact with WhatsApp green preservation
  const handleContactProduct = async (product: Product) => {
    if (!seller?.whatsappNumber || !sellerId) {
      try {
        await trackInteraction({
          type: 'wa_click',
          sellerId: sellerId!,
          productId: product.id,
          metadata: { location: 'card', action: 'whatsapp_cta_missing_number', reason: 'no_whatsapp_number' },
        });
      } catch (error) {
        console.warn('Failed to track blocked WhatsApp attempt:', error);
      }
      return;
    }
    
    try {
      await trackInteraction({
        type: 'wa_click',
        sellerId,
        productId: product.id,
        metadata: {
          location: 'card',
          action: 'whatsapp_cta_clicked',
          productName: product.name,
          productPrice: product.price,
          category: product.category,
          sellerName: seller.fullName || seller.storeName,
        },
      });
      
      const sellerFirstName = seller.fullName?.split(' ')[0] || seller.storeName;
      const productUrl = `${window.location.origin}/store/${sellerId}#${product.id}`;
      const message = `Hi ${sellerFirstName}, I'm interested in "${product.name}" on ShopLynk.

${productUrl}`;
      
      openWhatsApp(seller.whatsappNumber, message);
      
      if (window.innerWidth <= 768) {
        setTimeout(() => {
          setContactNotification({show: true, product});
        }, 800);
      }
    } catch (error) {
      console.error('Error contacting seller:', error);
      toast({
        title: 'Unable to open WhatsApp',
        description: 'Please try again or contact the seller directly.',
        variant: 'destructive',
      });
    }
  };

  // Enhanced payment and delivery data processing
  const paymentMethods = useMemo(() => {
    if (!seller?.paymentMethods) return [];
    
    const methods = Array.isArray(seller.paymentMethods) 
      ? seller.paymentMethods.filter(Boolean) 
      : Object.entries(seller.paymentMethods)
          .filter(([, value]) => !!value)
          .map(([key]) => key);
    
    return methods.sort((a, b) => {
      const order = ['mobile', 'card', 'bank', 'cash', 'paypal'];
      const aIndex = order.findIndex(o => a.toLowerCase().includes(o));
      const bIndex = order.findIndex(o => b.toLowerCase().includes(o));
      return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);
    });
  }, [seller?.paymentMethods]);

  const deliveryOptions = useMemo(() => {
    if (!seller?.deliveryOptions) return [];
    
    const options = Array.isArray(seller.deliveryOptions) 
      ? seller.deliveryOptions.filter(Boolean)
      : Object.entries(seller.deliveryOptions)
          .filter(([, value]) => !!value)
          .map(([key]) => key);
    
    return options.sort((a, b) => {
      const order = ['pickup', 'local', 'courier', 'nationwide', 'international'];
      const aIndex = order.findIndex(o => a.toLowerCase().includes(o));
      const bIndex = order.findIndex(o => b.toLowerCase().includes(o));
      return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);
    });
  }, [seller?.deliveryOptions]);

  // Helper functions for payment and delivery
  const getPaymentIcon = (method: string): string => {
    const key = method.toLowerCase();
    if (key.includes('mobile') || key.includes('momo')) return '📱';
    if (key.includes('card') || key.includes('visa') || key.includes('master')) return '💳';
    if (key.includes('bank') || key.includes('transfer')) return '🏦';
    if (key.includes('cash')) return '💵';
    if (key.includes('pos')) return '🧾';
    if (key.includes('paypal')) return '🅿️';
    if (key.includes('crypto') || key.includes('bitcoin')) return '₿';
    return '💳';
  };

  const getPaymentLabel = (method: string): string => {
    const key = method.toLowerCase();
    if (key.includes('mobile') || key.includes('momo')) return 'Mobile Money';
    if (key.includes('card')) return 'Card Payment';
    if (key.includes('bank')) return 'Bank Transfer';
    if (key.includes('cash')) return 'Cash Payment';
    if (key.includes('pos')) return 'POS Terminal';
    if (key.includes('paypal')) return 'PayPal';
    if (key.includes('crypto')) return 'Cryptocurrency';
    return method.charAt(0).toUpperCase() + method.slice(1);
  };

  const getDeliveryIcon = (option: string): string => {
    const key = option.toLowerCase();
    if (key.includes('pickup') || key.includes('collect')) return '🧍';
    if (key.includes('local') || key.includes('same day')) return '🚲';
    if (key.includes('courier') || key.includes('express')) return '🚚';
    if (key.includes('nation') || key.includes('country')) return '🛣️';
    if (key.includes('inter') || key.includes('worldwide')) return '✈️';
    if (key.includes('post') || key.includes('mail')) return '📮';
    return '🚚';
  };

  const getDeliveryLabel = (option: string): string => {
    const key = option.toLowerCase();
    if (key.includes('pickup')) return 'Self Pickup';
    if (key.includes('local')) return 'Local Delivery';
    if (key.includes('courier')) return 'Courier Service';
    if (key.includes('nation')) return 'Nationwide Shipping';
    if (key.includes('inter')) return 'International Shipping';
    if (key.includes('post')) return 'Postal Service';
    return option.charAt(0).toUpperCase() + option.slice(1);
  };

  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center" style={{
        background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)'
      }}>
        <div className="text-center space-y-6 p-12 bg-white/80 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/30">
          <div className="relative">
            <LoadingSpinner size="lg" />
            <div className="absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full opacity-20 animate-pulse"></div>
          </div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent">
            Loading Store
          </h2>
          <p className="text-slate-600 font-medium">
            Preparing your shopping experience...
          </p>
        </div>
      </div>
    );
  }

  // Error state
  if (error || !seller) {
    return (
      <div className="min-h-screen flex items-center justify-center" style={{
        background: 'linear-gradient(135deg, #fef2f2 0%, #fecaca 100%)'
      }}>
        <div className="text-center space-y-6 max-w-md mx-auto p-12 bg-white/90 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/30">
          <div className="w-20 h-20 mx-auto bg-gradient-to-br from-red-500 to-pink-500 rounded-full flex items-center justify-center shadow-xl">
            <Globe className="w-10 h-10 text-white" />
          </div>
          
          <div className="space-y-4">
            <h2 className="text-3xl font-bold bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent">
              Store Not Found
            </h2>
            <p className="text-slate-600 leading-relaxed">
              {error || "This store could not be found or may have been removed."}
            </p>
            <Button 
              onClick={() => window.location.reload()} 
              className="bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 text-white font-bold py-4 px-8 rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105"
              size="lg"
            >
              <ArrowLeft className="w-6 h-6 mr-3" />
              Try Again
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <style>{`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');
        
        /* CHAMPIONSHIP DESIGN SYSTEM */
        :root {
          --championship-blue: #1d4ed8;
          --championship-blue-light: #3b82f6;
          --championship-blue-lighter: #60a5fa;
          --championship-gradient: linear-gradient(135deg, #1d4ed8 0%, #3b82f6 100%);
          --championship-shadow: 0 10px 40px rgba(29, 78, 216, 0.15);
          --championship-shadow-hover: 0 20px 60px rgba(29, 78, 216, 0.25);
          --whatsapp-green: #25d366;
          --whatsapp-green-hover: #22c55e;
        }
        
        @keyframes fadeInUp {
          from { opacity: 0; transform: translateY(32px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideInRight {
          from { opacity: 0; transform: translateX(32px); }
          to { opacity: 1; transform: translateX(0); }
        }
        
        @keyframes scaleIn {
          from { opacity: 0; transform: scale(0.9); }
          to { opacity: 1; transform: scale(1); }
        }
        
        @keyframes shimmerFlow {
          0% { transform: translateX(-100%) skewX(-15deg); }
          100% { transform: translateX(200%) skewX(-15deg); }
        }
        
        /* CHAMPIONSHIP SEARCH BAR */
        .championship-search {
          position: relative;
          max-width: 800px;
          margin: 0 auto;
        }
        
        .championship-search-input {
          width: 100%;
          height: 64px;
          padding: 0 72px 0 72px;
          background: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(20px);
          border: 2px solid rgba(29, 78, 216, 0.1);
          border-radius: 32px;
          font-size: 18px;
          font-weight: 500;
          color: #1f2937;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          box-shadow: 0 8px 32px rgba(29, 78, 216, 0.08);
        }
        
        .championship-search-input:focus {
          outline: none;
          border-color: var(--championship-blue);
          box-shadow: 0 0 0 4px rgba(29, 78, 216, 0.1), 0 12px 40px rgba(29, 78, 216, 0.15);
          transform: translateY(-2px);
        }
        
        .championship-search-icon {
          position: absolute;
          left: 24px;
          top: 50%;
          transform: translateY(-50%);
          color: var(--championship-blue);
          transition: all 0.3s ease;
        }
        
        .championship-search-clear {
          position: absolute;
          right: 20px;
          top: 50%;
          transform: translateY(-50%);
          width: 36px;
          height: 36px;
          border-radius: 50%;
          background: rgba(71, 85, 105, 0.1);
          color: #64748b;
          border: none;
          cursor: pointer;
          transition: all 0.2s ease;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        
        .championship-search-clear:hover {
          background: rgba(239, 68, 68, 0.1);
          color: #ef4444;
          transform: translateY(-50%) scale(1.1);
        }
        
        /* CHAMPIONSHIP FILTER SYSTEM */
        .championship-filters {
          display: flex;
          align-items: center;
          justify-content: space-between;
          gap: 32px;
          padding: 32px 0;
          flex-wrap: wrap;
        }
        
        .championship-categories {
          display: flex;
          align-items: center;
          gap: 20px;
          flex-wrap: wrap;
        }
        
        .championship-category-label {
          font-size: 16px;
          font-weight: 700;
          color: #374151;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          display: flex;
          align-items: center;
          gap: 12px;
        }
        
        .championship-category-pill {
          padding: 12px 24px;
          border-radius: 20px;
          font-size: 15px;
          font-weight: 600;
          border: 2px solid transparent;
          cursor: pointer;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          position: relative;
          overflow: hidden;
          white-space: nowrap;
        }
        
        .championship-category-pill-inactive {
          background: rgba(255, 255, 255, 0.9);
          color: #64748b;
          border-color: rgba(226, 232, 240, 0.8);
          box-shadow: 0 4px 12px rgba(15, 23, 42, 0.04);
        }
        
        .championship-category-pill-inactive:hover {
          background: rgba(239, 246, 255, 0.95);
          color: var(--championship-blue);
          border-color: rgba(29, 78, 216, 0.3);
          transform: translateY(-2px);
          box-shadow: 0 8px 24px rgba(29, 78, 216, 0.1);
        }
        
        .championship-category-pill-active {
          background: var(--championship-gradient);
          color: white;
          border-color: var(--championship-blue);
          box-shadow: var(--championship-shadow);
          transform: translateY(-1px);
        }
        
        .championship-category-pill-active::before {
          content: '';
          position: absolute;
          top: 0;
          left: -100%;
          width: 100%;
          height: 100%;
          background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
          animation: shimmerFlow 2s infinite;
        }
        
        .championship-category-pill-active:hover {
          transform: translateY(-3px) scale(1.02);
          box-shadow: var(--championship-shadow-hover);
        }
        
        /* CHAMPIONSHIP CONTROLS */
        .championship-controls {
          display: flex;
          align-items: center;
          gap: 16px;
          flex-wrap: wrap;
        }
        
        .championship-select {
          min-width: 200px;
          height: 48px;
          padding: 0 20px;
          background: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(16px);
          border: 2px solid rgba(226, 232, 240, 0.6);
          border-radius: 16px;
          font-size: 15px;
          font-weight: 600;
          color: #374151;
          cursor: pointer;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          box-shadow: 0 4px 12px rgba(15, 23, 42, 0.04);
        }
        
        .championship-select:hover {
          border-color: rgba(29, 78, 216, 0.4);
          transform: translateY(-1px);
          box-shadow: 0 8px 24px rgba(29, 78, 216, 0.08);
        }
        
        .championship-select:focus {
          outline: none;
          border-color: var(--championship-blue);
          box-shadow: 0 0 0 4px rgba(29, 78, 216, 0.1);
        }
        
        .championship-favorites {
          height: 48px;
          padding: 0 24px;
          background: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(16px);
          border: 2px solid rgba(226, 232, 240, 0.6);
          border-radius: 16px;
          font-size: 15px;
          font-weight: 600;
          color: #374151;
          cursor: pointer;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          box-shadow: 0 4px 12px rgba(15, 23, 42, 0.04);
          display: flex;
          align-items: center;
          gap: 12px;
          position: relative;
        }
        
        .championship-favorites:hover {
          border-color: rgba(239, 68, 68, 0.4);
          color: #ef4444;
          transform: translateY(-1px);
          box-shadow: 0 8px 24px rgba(239, 68, 68, 0.1);
        }
        
        .championship-favorites-active {
          background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
          color: white;
          border-color: #ef4444;
          box-shadow: 0 8px 24px rgba(239, 68, 68, 0.3);
        }
        
        .championship-favorites-active:hover {
          transform: translateY(-2px) scale(1.02);
          box-shadow: 0 12px 32px rgba(239, 68, 68, 0.4);
        }
        
        .championship-favorites-badge {
          background: #fbbf24;
          color: #92400e;
          border-radius: 50%;
          width: 24px;
          height: 24px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 12px;
          font-weight: 700;
          box-shadow: 0 2px 8px rgba(251, 191, 36, 0.4);
        }
        
        /* CHAMPIONSHIP PRODUCT GRID */
        .championship-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
          gap: 32px;
          padding: 40px 0;
        }
        
        /* CHAMPIONSHIP PRODUCT CARD */
        .championship-card {
          background: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(20px);
          border: 1px solid rgba(255, 255, 255, 0.3);
          border-radius: 24px;
          overflow: hidden;
          cursor: pointer;
          transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
          box-shadow: 0 8px 32px rgba(15, 23, 42, 0.06);
          position: relative;
          animation: fadeInUp 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .championship-card::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: linear-gradient(135deg, rgba(29, 78, 216, 0.02) 0%, rgba(59, 130, 246, 0.02) 100%);
          opacity: 0;
          transition: opacity 0.3s ease;
          z-index: 1;
          pointer-events: none;
        }
        
        .championship-card:hover {
          transform: translateY(-8px) scale(1.02);
          box-shadow: 0 20px 60px rgba(29, 78, 216, 0.15);
          border-color: rgba(29, 78, 216, 0.2);
        }
        
        .championship-card:hover::before {
          opacity: 1;
        }
        
        .championship-card-image-container {
          position: relative;
          aspect-ratio: 1;
          overflow: hidden;
          background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        }
        
        .championship-card-image {
          width: 100%;
          height: 100%;
          object-fit: cover;
          transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .championship-card:hover .championship-card-image {
          transform: scale(1.05);
        }
        
        .championship-favorite-btn {
          position: absolute;
          top: 16px;
          right: 16px;
          width: 44px;
          height: 44px;
          border-radius: 50%;
          background: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(16px);
          border: none;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          box-shadow: 0 4px 16px rgba(15, 23, 42, 0.1);
          z-index: 2;
        }
        
        .championship-favorite-btn:hover {
          transform: scale(1.1);
          box-shadow: 0 8px 24px rgba(15, 23, 42, 0.15);
        }
        
        .championship-badge-overlay {
          position: absolute;
          top: 16px;
          left: 16px;
          display: flex;
          flex-direction: column;
          gap: 8px;
          z-index: 2;
        }
        
        .championship-badge {
          padding: 6px 12px;
          border-radius: 20px;
          font-size: 12px;
          font-weight: 700;
          text-transform: uppercase;
          letter-spacing: 0.025em;
          backdrop-filter: blur(16px);
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .championship-badge-new {
          background: rgba(16, 185, 129, 0.95);
          color: white;
        }
        
        .championship-badge-limited {
          background: rgba(239, 68, 68, 0.95);
          color: white;
        }
        
        .championship-badge-featured {
          background: rgba(251, 191, 36, 0.95);
          color: #92400e;
        }
        
        .championship-card-content {
          padding: 24px;
          position: relative;
          z-index: 2;
        }
        
        .championship-card-title {
          font-size: 20px;
          font-weight: 700;
          color: #111827;
          line-height: 1.3;
          margin-bottom: 8px;
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
        
        .championship-card-brand {
          font-size: 14px;
          font-weight: 600;
          color: #6b7280;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          margin-bottom: 16px;
        }
        
        .championship-card-price {
          font-size: 24px;
          font-weight: 800;
          color: #059669;
          margin-bottom: 16px;
          letter-spacing: -0.025em;
        }
        
        .championship-card-category {
          display: inline-flex;
          align-items: center;
          gap: 6px;
          padding: 6px 16px;
          background: rgba(29, 78, 216, 0.1);
          color: var(--championship-blue);
          border-radius: 16px;
          font-size: 13px;
          font-weight: 600;
          margin-bottom: 20px;
        }
        
        .championship-card-actions {
          display: flex;
          flex-direction: column;
          gap: 12px;
          padding-top: 20px;
          border-top: 1px solid rgba(226, 232, 240, 0.6);
        }
        
        .championship-whatsapp-btn {
          width: 100%;
          height: 48px;
          background: var(--whatsapp-green);
          color: white;
          border: none;
          border-radius: 16px;
          font-size: 15px;
          font-weight: 700;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 12px;
          cursor: pointer;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          box-shadow: 0 6px 20px rgba(37, 211, 102, 0.3);
          position: relative;
          overflow: hidden;
        }
        
        .championship-whatsapp-btn::before {
          content: '';
          position: absolute;
          top: 0;
          left: -100%;
          width: 100%;
          height: 100%;
          background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
          transition: left 0.6s ease;
        }
        
        .championship-whatsapp-btn:hover::before {
          left: 100%;
        }
        
        .championship-whatsapp-btn:hover {
          background: var(--whatsapp-green-hover);
          transform: translateY(-2px);
          box-shadow: 0 10px 30px rgba(37, 211, 102, 0.4);
        }
        
        .championship-details-btn {
          width: 100%;
          height: 44px;
          background: rgba(255, 255, 255, 0.9);
          color: #374151;
          border: 2px solid rgba(226, 232, 240, 0.8);
          border-radius: 14px;
          font-size: 14px;
          font-weight: 600;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          cursor: pointer;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          backdrop-filter: blur(8px);
        }
        
        .championship-details-btn:hover {
          background: rgba(248, 250, 252, 0.95);
          border-color: rgba(29, 78, 216, 0.3);
          color: var(--championship-blue);
          transform: translateY(-1px);
          box-shadow: 0 6px 16px rgba(29, 78, 216, 0.08);
        }
        
        /* CHAMPIONSHIP STOCK WARNING */
        .championship-stock-warning {
          background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
          color: white;
          padding: 12px 16px;
          border-radius: 12px;
          font-size: 12px;
          font-weight: 700;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          text-align: center;
          margin-top: 12px;
          box-shadow: 0 4px 16px rgba(239, 68, 68, 0.3);
        }
        
        /* CHAMPIONSHIP EMPTY STATE */
        .championship-empty {
          text-align: center;
          padding: 80px 40px;
          background: rgba(255, 255, 255, 0.8);
          backdrop-filter: blur(20px);
          border-radius: 32px;
          border: 2px dashed rgba(226, 232, 240, 0.8);
          margin: 40px 0;
        }
        
        .championship-empty-icon {
          width: 80px;
          height: 80px;
          margin: 0 auto 24px;
          color: #cbd5e1;
        }
        
        .championship-empty-title {
          font-size: 28px;
          font-weight: 800;
          color: #374151;
          margin-bottom: 12px;
        }
        
        .championship-empty-description {
          font-size: 18px;
          color: #6b7280;
          margin-bottom: 32px;
          max-width: 500px;
          margin-left: auto;
          margin-right: auto;
          line-height: 1.6;
        }
        
        .championship-clear-btn {
          background: var(--championship-gradient);
          color: white;
          border: none;
          border-radius: 16px;
          padding: 16px 32px;
          font-size: 16px;
          font-weight: 700;
          cursor: pointer;
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          box-shadow: var(--championship-shadow);
        }
        
        .championship-clear-btn:hover {
          transform: translateY(-2px) scale(1.05);
          box-shadow: var(--championship-shadow-hover);
        }
        
        /* CHAMPIONSHIP MODAL SYSTEM */
        .championship-modal-overlay {
          position: fixed;
          inset: 0;
          background: rgba(15, 23, 42, 0.8);
          backdrop-filter: blur(12px);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 50;
          padding: 20px;
          animation: fadeInUp 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .championship-modal {
          background: white;
          border-radius: 32px;
          box-shadow: 0 25px 100px rgba(15, 23, 42, 0.3);
          max-width: 600px;
          width: 100%;
          max-height: 90vh;
          overflow: hidden;
          animation: scaleIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .championship-modal-header {
          background: var(--championship-gradient);
          padding: 32px;
          color: white;
          position: relative;
          overflow: hidden;
        }
        
        .championship-modal-header::before {
          content: '';
          position: absolute;
          top: -50%;
          left: -50%;
          width: 200%;
          height: 200%;
          background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
          animation: shimmerFlow 4s infinite linear;
        }
        
        .championship-modal-title {
          font-size: 28px;
          font-weight: 800;
          margin-bottom: 8px;
          position: relative;
          z-index: 1;
        }
        
        .championship-modal-subtitle {
          font-size: 16px;
          opacity: 0.9;
          position: relative;
          z-index: 1;
        }
        
        .championship-modal-close {
          position: absolute;
          top: 24px;
          right: 24px;
          width: 44px;
          height: 44px;
          border-radius: 50%;
          background: rgba(255, 255, 255, 0.2);
          color: white;
          border: none;
          cursor: pointer;
          transition: all 0.3s ease;
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 2;
        }
        
        .championship-modal-close:hover {
          background: rgba(255, 255, 255, 0.3);
          transform: scale(1.1);
        }
        
        .championship-modal-content {
          padding: 32px;
          max-height: 60vh;
          overflow-y: auto;
        }
        
        .championship-method-item {
          display: flex;
          align-items: center;
          gap: 20px;
          padding: 20px;
          background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
          border-radius: 20px;
          border: 2px solid rgba(226, 232, 240, 0.6);
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          margin-bottom: 16px;
        }
        
        .championship-method-item:hover {
          transform: translateY(-2px);
          border-color: rgba(29, 78, 216, 0.3);
          box-shadow: 0 8px 24px rgba(29, 78, 216, 0.1);
        }
        
        .championship-method-icon {
          width: 56px;
          height: 56px;
          background: white;
          border-radius: 16px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 28px;
          box-shadow: 0 4px 16px rgba(15, 23, 42, 0.1);
          flex-shrink: 0;
        }
        
        .championship-method-info {
          flex: 1;
        }
        
        .championship-method-title {
          font-size: 18px;
          font-weight: 700;
          color: #111827;
          margin-bottom: 4px;
        }
        
        .championship-method-description {
          font-size: 14px;
          color: #6b7280;
          font-weight: 500;
        }
        
        /* CHAMPIONSHIP NOTIFICATION */
        .championship-notification {
          position: fixed;
          top: 32px;
          right: 32px;
          z-index: 60;
          max-width: 400px;
          animation: slideInRight 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .championship-notification-card {
          background: linear-gradient(135deg, var(--whatsapp-green) 0%, #22c55e 100%);
          color: white;
          padding: 24px;
          border-radius: 20px;
          box-shadow: 0 20px 60px rgba(37, 211, 102, 0.4);
          border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .championship-notification-content {
          display: flex;
          align-items: flex-start;
          gap: 16px;
        }
        
        .championship-notification-icon {
          width: 48px;
          height: 48px;
          background: rgba(255, 255, 255, 0.2);
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          flex-shrink: 0;
        }
        
        .championship-notification-text {
          flex: 1;
          min-width: 0;
        }
        
        .championship-notification-title {
          font-size: 18px;
          font-weight: 700;
          margin-bottom: 4px;
        }
        
        .championship-notification-description {
          font-size: 14px;
          opacity: 0.9;
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
        
        .championship-notification-close {
          background: rgba(255, 255, 255, 0.2);
          color: white;
          border: none;
          border-radius: 50%;
          width: 32px;
          height: 32px;
          cursor: pointer;
          transition: all 0.2s ease;
          display: flex;
          align-items: center;
          justify-content: center;
          flex-shrink: 0;
        }
        
        .championship-notification-close:hover {
          background: rgba(255, 255, 255, 0.3);
          transform: scale(1.1);
        }
        
        /* RESPONSIVE DESIGN */
        @media (max-width: 1024px) {
          .championship-grid {
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 24px;
          }
          
          .championship-filters {
            flex-direction: column;
            align-items: stretch;
            gap: 24px;
          }
          
          .championship-categories {
            justify-content: center;
          }
          
          .championship-controls {
            justify-content: center;
          }
        }
        
        @media (max-width: 768px) {
          .championship-grid {
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: 20px;
          }
          
          .championship-search-input {
            height: 56px;
            font-size: 16px;
            padding: 0 60px 0 60px;
          }
          
          .championship-search-icon {
            left: 20px;
          }
          
          .championship-search-clear {
            right: 16px;
          }
          
          .championship-categories {
            flex-wrap: wrap;
            justify-content: center;
            gap: 12px;
          }
          
          .championship-category-pill {
            padding: 10px 20px;
            font-size: 14px;
          }
          
          .championship-select {
            min-width: 160px;
            height: 44px;
            font-size: 14px;
          }
          
          .championship-favorites {
            height: 44px;
            padding: 0 20px;
            font-size: 14px;
          }
        }
        
        /* ACCESSIBILITY */
        @media (prefers-reduced-motion: reduce) {
          * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.15s !important;
          }
        }
        
        @media (prefers-contrast: high) {
          .championship-card {
            border: 3px solid #000;
          }
          
          .championship-category-pill-inactive {
            border-color: #000;
          }
        }
        
        /* FOCUS MANAGEMENT */
        .championship-card:focus-visible,
        .championship-category-pill:focus-visible,
        .championship-select:focus-visible,
        .championship-favorites:focus-visible {
          outline: 3px solid var(--championship-blue);
          outline-offset: 2px;
        }
      `}</style>

      <div className="min-h-screen" style={{
        background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 50%, #f1f5f9 100%)'
      }}>
        {/* Championship Store Header */}
        {isOwner && (
          <StoreHeader
            name={seller?.storeName || 'Store Name'}
            logoUrl={seller?.logoUrl}
            description={seller?.storeDescription}
            paymentCount={paymentMethods.length}
            deliveryCount={deliveryOptions.length}
            onBack={() => window.location.href = '/dashboard'}
            socials={{
              instagram: seller?.socialMedia?.instagram ? normalizeUrl(seller.socialMedia.instagram, 'instagram') : undefined,
              tiktok: seller?.socialMedia?.tiktok ? normalizeUrl(seller.socialMedia.tiktok, 'tiktok') : undefined,
              facebook: seller?.socialMedia?.facebook ? normalizeUrl(seller.socialMedia.facebook, 'facebook') : undefined,
            }}
          />
        )}

        {/* Championship Search & Filter Section */}
        <FullWidthContainer className="py-16">
          {/* Premium Search Bar */}
          <div className="championship-search mb-12">
            <Search className="championship-search-icon w-7 h-7" />
            <input
              type="text"
              placeholder="Search for products, brands, or categories..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="championship-search-input"
            />
            {searchQuery && (
              <button
                onClick={() => setSearchQuery('')}
                className="championship-search-clear"
              >
                <X className="w-5 h-5" />
              </button>
            )}
          </div>

          {/* Championship Filter System */}
          <div className="championship-filters">
            <div className="championship-categories">
              <div className="championship-category-label">
                <Filter className="w-6 h-6 text-blue-600" />
                Categories
              </div>
              
              <button
                onClick={() => setCategoryFilter('all')}
                className={`championship-category-pill ${
                  categoryFilter === 'all' 
                    ? 'championship-category-pill-active' 
                    : 'championship-category-pill-inactive'
                }`}
              >
                All Categories ({products.length})
              </button>
              
              {categories.slice(0, 5).map(category => {
                const count = products.filter(p => p.category === category).length;
                return (
                  <button
                    key={category}
                    onClick={() => setCategoryFilter(category)}
                    className={`championship-category-pill ${
                      categoryFilter === category 
                        ? 'championship-category-pill-active' 
                        : 'championship-category-pill-inactive'
                    }`}
                  >
                    {category} ({count})
                  </button>
                );
              })}
            </div>

            <div className="championship-controls">
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="championship-select"
              >
                <option value="newest">🆕 Newest First</option>
                <option value="popular">🔥 Most Popular</option>
                <option value="price-low">💰 Price: Low to High</option>
                <option value="price-high">💎 Price: High to Low</option>
                <option value="name">📝 Name A-Z</option>
              </select>

              <button
                onClick={() => setShowFavorites(!showFavorites)}
                className={`championship-favorites ${
                  showFavorites ? 'championship-favorites-active' : ''
                }`}
              >
                <Heart className={`w-6 h-6 ${showFavorites ? 'fill-current' : ''}`} />
                Favorites
                {favorites.size > 0 && (
                  <span className="championship-favorites-badge">
                    {favorites.size}
                  </span>
                )}
              </button>
            </div>
          </div>

          {/* Enhanced Results Summary */}
          {(searchQuery || categoryFilter !== 'all' || showFavorites) && (
            <div className="mb-12">
              <div className="p-8 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-3xl border-2 border-blue-200 backdrop-blur-xl">
                <div className="flex items-center justify-between flex-wrap gap-6">
                  <div className="space-y-3">
                    <h3 className="text-2xl font-bold text-slate-800">
                      Found {filteredProducts.length} Product{filteredProducts.length !== 1 ? 's' : ''}
                    </h3>
                    <div className="flex flex-wrap gap-3">
                      {searchQuery && (
                        <span className="inline-flex items-center gap-2 px-4 py-2 bg-blue-100 text-blue-800 rounded-full font-semibold text-sm">
                          <Search className="w-4 h-4" />
                          "{searchQuery}"
                        </span>
                      )}
                      {categoryFilter !== 'all' && (
                        <span className="inline-flex items-center gap-2 px-4 py-2 bg-purple-100 text-purple-800 rounded-full font-semibold text-sm">
                          <Filter className="w-4 h-4" />
                          {categoryFilter}
                        </span>
                      )}
                      {showFavorites && (
                        <span className="inline-flex items-center gap-2 px-4 py-2 bg-red-100 text-red-800 rounded-full font-semibold text-sm">
                          <Heart className="w-4 h-4 fill-current" />
                          Favorites Only
                        </span>
                      )}
                    </div>
                  </div>
                  <button
                    onClick={() => {
                      setSearchQuery('');
                      setCategoryFilter('all');
                      setShowFavorites(false);
                    }}
                    className="championship-clear-btn"
                  >
                    Clear All Filters
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Championship Product Grid */}
          {filteredProducts.length === 0 ? (
            <div className="championship-empty">
              <Search className="championship-empty-icon" />
              <h3 className="championship-empty-title">
                {searchQuery || categoryFilter !== 'all' || showFavorites ? "No products match your filters" : "No products available"}
              </h3>
              <p className="championship-empty-description">
                {searchQuery || categoryFilter !== 'all' || showFavorites
                  ? "Try adjusting your search or filters to find what you're looking for."
                  : "This store doesn't have any products listed yet. Check back soon!"
                }
              </p>
              {(searchQuery || categoryFilter !== 'all' || showFavorites) && (
                <button
                  onClick={() => {
                    setSearchQuery('');
                    setCategoryFilter('all');
                    setShowFavorites(false);
                  }}
                  className="championship-clear-btn"
                >
                  Clear All Filters
                </button>
              )}
            </div>
          ) : (
            <div className="championship-grid">
              {filteredProducts.map((product) => (
                <div
                  key={product.id}
                  className="championship-card"
                  onClick={() => handleProductView(product)}
                >
                  <div className="championship-card-image-container">
                    <img
                      src={getProductImageUrl(product) || PLACEHOLDER_IMAGE}
                      alt={product.name}
                      className="championship-card-image"
                      onLoad={(e) => handleImageLoad(product.id, e)}
                      onError={handleImageError}
                      loading="lazy"
                    />
                    
                    {/* Favorite Button */}
                    {!isOwner && (
                      <button
                        className="championship-favorite-btn"
                        onClick={(e) => toggleFavorite(product.id, e)}
                        aria-pressed={favorites.has(product.id)}
                      >
                        <Heart
                          className={`w-6 h-6 ${
                            favorites.has(product.id)
                              ? 'fill-current text-red-500'
                              : 'text-slate-400'
                          }`}
                        />
                      </button>
                    )}

                    {/* Product Badges */}
                    <div className="championship-badge-overlay">
                      {(Date.now() - (product.createdAt || 0)) < 7 * 24 * 60 * 60 * 1000 && (
                        <span className="championship-badge championship-badge-new">
                          New
                        </span>
                      )}
                      {product.quantity < 5 && (
                        <span className="championship-badge championship-badge-limited">
                          Limited
                        </span>
                      )}
                      {product.features?.includes('featured') && (
                        <span className="championship-badge championship-badge-featured">
                          Featured
                        </span>
                      )}
                    </div>
                  </div>

                  <div className="championship-card-content">
                    <h3 className="championship-card-title">
                      {product.name}
                    </h3>
                    
                    {product.brand && (
                      <p className="championship-card-brand">
                        {product.brand}
                      </p>
                    )}

                    <div className="championship-card-price">
                      {formatPrice(product.price)}
                    </div>

                    <div className="championship-card-category">
                      <span>{product.category}</span>
                    </div>

                    <div className="championship-card-actions">
                      {/* WhatsApp Contact Button - Preserving Green */}
                      {seller?.whatsappNumber ? (
                        <button
                          className="championship-whatsapp-btn"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleContactProduct(product);
                          }}
                        >
                          <MessageCircle className="w-5 h-5" />
                          Contact Seller
                        </button>
                      ) : isOwner ? (
                        <div className="relative group">
                          <button
                            disabled
                            className="championship-whatsapp-btn opacity-60 cursor-not-allowed"
                          >
                            <MessageCircle className="w-5 h-5" />
                            Contact Seller
                          </button>
                          <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-10">
                            <div className="bg-black text-white text-xs rounded-lg px-3 py-2 whitespace-nowrap">
                              Add WhatsApp number in Settings
                            </div>
                          </div>
                        </div>
                      ) : null}
                      
                      <button
                        className="championship-details-btn"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleProductView(product);
                        }}
                      >
                        <Info className="w-4 h-4" />
                        View Details
                      </button>
                    </div>

                    {/* Stock Warning */}
                    {product.quantity <= 10 && (
                      <div className="championship-stock-warning">
                        Only {product.quantity} left in stock
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </FullWidthContainer>

        {/* Championship Contact Notification */}
        {contactNotification.show && contactNotification.product && (
          <div className="championship-notification">
            <div className="championship-notification-card">
              <div className="championship-notification-content">
                <div className="championship-notification-icon">
                  <CheckCircle className="w-6 h-6" />
                </div>
                <div className="championship-notification-text">
                  <h4 className="championship-notification-title">WhatsApp Opening...</h4>
                  <p className="championship-notification-description">
                    Contacted seller about "{contactNotification.product.name}"
                  </p>
                </div>
                <button
                  onClick={() => setContactNotification({show: false, product: null})}
                  className="championship-notification-close"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        )}
        
        {/* Championship Payment Methods Modal */}
        {showPaymentModal && (
          <div 
            className="championship-modal-overlay" 
            onClick={() => setShowPaymentModal(false)}
          >
            <div 
              className="championship-modal" 
              onClick={(e) => e.stopPropagation()}
            >
              <div className="championship-modal-header">
                <div className="championship-modal-title">Payment Methods</div>
                <div className="championship-modal-subtitle">Secure payment options available</div>
                <button 
                  onClick={() => setShowPaymentModal(false)}
                  className="championship-modal-close"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
              
              <div className="championship-modal-content">
                {paymentMethods.map((method, index) => (
                  <div key={index} className="championship-method-item">
                    <div className="championship-method-icon">
                      {getPaymentIcon(method)}
                    </div>
                    <div className="championship-method-info">
                      <div className="championship-method-title">{getPaymentLabel(method)}</div>
                      <div className="championship-method-description">Secure payment processing</div>
                    </div>
                  </div>
                ))}
                {paymentMethods.length === 0 && (
                  <div className="text-center py-12">
                    <Info className="w-16 h-16 text-slate-400 mx-auto mb-6" />
                    <h4 className="text-xl font-bold text-slate-800 mb-3">Payment Details Available</h4>
                    <p className="text-slate-600 leading-relaxed">
                      Payment methods will be shared when you contact the seller.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
        
        {/* Championship Delivery Options Modal */}
        {showDeliveryModal && (
          <div 
            className="championship-modal-overlay" 
            onClick={() => setShowDeliveryModal(false)}
          >
            <div 
              className="championship-modal" 
              onClick={(e) => e.stopPropagation()}
            >
              <div className="championship-modal-header">
                <div className="championship-modal-title">Delivery Options</div>
                <div className="championship-modal-subtitle">Fast and reliable delivery services</div>
                <button 
                  onClick={() => setShowDeliveryModal(false)}
                  className="championship-modal-close"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
              
              <div className="championship-modal-content">
                {deliveryOptions.map((option, index) => (
                  <div key={index} className="championship-method-item">
                    <div className="championship-method-icon">
                      {getDeliveryIcon(option)}
                    </div>
                    <div className="championship-method-info">
                      <div className="championship-method-title">{getDeliveryLabel(option)}</div>
                      <div className="championship-method-description">Reliable delivery service</div>
                    </div>
                  </div>
                ))}
                {deliveryOptions.length === 0 && (
                  <div className="text-center py-12">
                    <Info className="w-16 h-16 text-slate-400 mx-auto mb-6" />
                    <h4 className="text-xl font-bold text-slate-800 mb-3">Delivery Info Available</h4>
                    <p className="text-slate-600 leading-relaxed">
                      Delivery options will be discussed when you contact the seller.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
        
        {/* Championship Product Detail Modal */}
        {showProductModal && selectedProduct && (
          <div 
            className="championship-modal-overlay" 
            onClick={() => setShowProductModal(false)}
          >
            <div 
              className="championship-modal max-w-5xl" 
              onClick={(e) => e.stopPropagation()}
            >
              {/* Product Image Header */}
              <div className="relative">
                <div className="aspect-[16/9] relative overflow-hidden bg-gradient-to-br from-slate-100 to-slate-50">
                  <img
                    src={getProductImageUrl(selectedProduct) || PLACEHOLDER_IMAGE}
                    alt={selectedProduct.name}
                    className="w-full h-full object-cover"
                  />
                  
                  <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent"></div>
                  
                  {lowResImages[selectedProduct.id] && (
                    <div className="absolute top-6 left-6 bg-gradient-to-r from-orange-500 to-red-500 text-white px-4 py-3 rounded-full font-bold text-sm shadow-2xl">
                      Low Quality Image
                    </div>
                  )}
                  
                  <button
                    onClick={() => setShowProductModal(false)}
                    className="absolute top-6 right-6 w-14 h-14 bg-white/90 backdrop-blur-md hover:bg-white rounded-full shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center"
                  >
                    <X className="w-7 h-7" />
                  </button>
                  
                  <button
                    onClick={(e) => toggleFavorite(selectedProduct.id, e)}
                    className={`absolute top-6 left-6 w-14 h-14 bg-white/90 backdrop-blur-md hover:bg-white rounded-full shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center ${
                      favorites.has(selectedProduct.id) ? 'text-red-500' : 'text-slate-600'
                    }`}
                  >
                    <Heart 
                      className="w-7 h-7" 
                      fill={favorites.has(selectedProduct.id) ? 'currentColor' : 'none'} 
                    />
                  </button>
                </div>
              </div>
              
              {/* Product Details Content */}
              <div className="p-8 space-y-8 max-h-[60vh] overflow-y-auto">
                {/* Header Section */}
                <div className="flex flex-col lg:flex-row lg:items-start justify-between gap-6">
                  <div className="flex-1 space-y-4">
                    <h2 className="text-3xl font-bold text-gray-800">
                      {selectedProduct.name}
                    </h2>
                    <div className="flex items-center gap-3 flex-wrap">
                      <span className="inline-flex items-center px-4 py-2 rounded-xl bg-slate-800 text-white text-sm font-semibold">
                        {selectedProduct.category}
                      </span>
                      {(Date.now() - (selectedProduct.createdAt || 0)) < 7 * 24 * 60 * 60 * 1000 && (
                        <span className="inline-flex items-center px-3 py-1.5 rounded-xl bg-emerald-500 text-white text-sm font-semibold">
                          New arrival
                        </span>
                      )}
                    </div>
                  </div>
                  
                  <div className="lg:text-right space-y-2">
                    <div className="text-4xl font-bold text-emerald-600">
                      {formatPrice(selectedProduct.price)}
                    </div>
                    <div className="text-sm text-slate-500 font-medium">per unit</div>
                  </div>
                </div>
                
                {/* Stock Status */}
                <div className={`p-6 rounded-2xl border-2 ${
                  selectedProduct.quantity > 10 
                    ? 'bg-emerald-50 border-emerald-300' 
                    : selectedProduct.quantity > 0 
                      ? 'bg-yellow-50 border-yellow-300' 
                      : 'bg-red-50 border-red-300'
                }`}>
                  <div className="flex items-center gap-4">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center shadow-lg ${
                      selectedProduct.quantity > 10 ? 'bg-emerald-500' :
                      selectedProduct.quantity > 0 ? 'bg-yellow-500' : 'bg-red-500'
                    }`}>
                      <div className="w-3 h-3 bg-white rounded-full animate-pulse"></div>
                    </div>
                    <div className="flex-1">
                      <div className={`font-bold text-lg ${
                        selectedProduct.quantity > 10 ? 'text-emerald-700' :
                        selectedProduct.quantity > 0 ? 'text-yellow-700' : 'text-red-700'
                      }`}>
                        {selectedProduct.quantity > 10 ? 'In stock & ready to ship' :
                         selectedProduct.quantity > 0 ? `Limited stock — Only ${selectedProduct.quantity} left` : 
                         'Currently out of stock'}
                      </div>
                      <p className="text-slate-600 mt-1 text-sm font-medium">
                        {selectedProduct.quantity > 0 
                          ? `${selectedProduct.quantity} ${selectedProduct.quantity === 1 ? 'unit' : 'units'} available`
                          : 'Contact seller for restocking information'
                        }
                      </p>
                    </div>
                  </div>
                </div>

                {/* Description */}
                {selectedProduct.description && (
                  <div className="space-y-4">
                    <h3 className="text-xl font-bold text-gray-800 flex items-center gap-3">
                      <Info className="w-5 h-5 text-blue-600" />
                      Description
                    </h3>
                    <p className="text-gray-600 p-6 bg-blue-50 rounded-2xl border border-blue-100 leading-relaxed">
                      {selectedProduct.description}
                    </p>
                  </div>
                )}
                
                {/* Championship Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-6 pt-8 border-t-2 border-slate-200">
                  <button
                    onClick={() => handleContactProduct(selectedProduct)}
                    className="flex-1 h-16 bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 text-white shadow-2xl hover:shadow-3xl transition-all duration-300 hover:scale-105 text-xl font-bold rounded-2xl flex items-center justify-center gap-4"
                  >
                    <MessageCircle className="w-7 h-7" />
                    Contact Seller on WhatsApp
                  </button>
                  <button
                    onClick={(e) => toggleFavorite(selectedProduct.id, e)}
                    className="sm:px-12 h-16 border-3 hover:bg-red-50 hover:border-red-300 rounded-2xl transition-all duration-300 hover:scale-105 font-bold text-lg border-slate-300 bg-white flex items-center justify-center gap-3"
                  >
                    <Heart 
                      className={`w-7 h-7 ${favorites.has(selectedProduct.id) ? 'fill-current text-red-500' : 'text-slate-400'}`} 
                    />
                    {favorites.has(selectedProduct.id) ? 'Remove from Favorites' : 'Add to Favorites'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
}
                