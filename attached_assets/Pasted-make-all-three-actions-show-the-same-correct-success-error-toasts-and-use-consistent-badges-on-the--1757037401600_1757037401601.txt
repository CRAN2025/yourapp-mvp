make all three actions show the same, correct success/error toasts and use consistent badges on the cards. The actions themselves already work; the issue is the messaging and visual state.

1) Unify optimistic flow + toasts (same pattern as we fixed for Duplicate/Delete)

For Mark as Sold, use the same optimistic pattern we now use for Duplicate/Delete:

Write to RTDB.

Wait for our onValue listener to reflect the change.

Show success toast if it reflected, else show destructive toast.

// utils
const showOutcome = (ok: boolean, okTitle: string, okDesc: string, errTitle: string) =>
  toast(ok
    ? { title: okTitle, description: okDesc }
    : { variant: 'destructive', title: errTitle, description: 'Please try again.' }
  );

// Products.tsx
const handleMarkAsSold = async (product: Product) => {
  if (!user) return;

  // 1) Write: treat “sold” as quantity=0 and isActive=false, stamp soldAt
  try {
    const productRef = ref(database, `sellers/${user.uid}/products/${product.id}`);
    await set(productRef, {
      ...product,
      quantity: 0,
      isActive: false,
      soldAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
    });

    // Also unpublish from public mirror
    const publicRef = ref(database, `publicStores/${user.uid}/products/${product.id}`);
    await remove(publicRef);
  } catch {
    // We still decide success based on observed state below
  }

  // 2) Observe reflected state (via current products state)
  const reflected = await waitFor(
    () => {
      const p = products.find(p => p.id === product.id);
      return !!p && p.quantity === 0 && p.isActive === false;
    },
    3000
  );

  // 3) Toast
  showOutcome(
    reflected,
    'Marked as sold',
    `"${product.name}" is no longer available.`,
    'Could not mark as sold'
  );
};


Note: don’t surface raw Firebase errors when the UI already reflects success; decide purely by the observed state (same as duplicate/delete).

2) Make status pills consistent

We currently show IN STOCK (green), LOW STOCK (amber), OUT OF STOCK (red) via getStockPill. “SOLD” appears as a separate black chip that looks like our dark category chips—this reads inconsistent.

Please do one of these (pick one and apply everywhere):

Option A (simplest): Treat “sold” exactly as OUT OF STOCK (red pill). No separate “SOLD” pill; use the existing red style from getStockPill.
Pros: zero new styles; crystal-clear to users.

Option B (distinct but consistent): Keep a SOLD pill but use our status-pill styling (rounded, small, semibold) with a neutral background—not the dark category style. Also add a light grayscale overlay on the product image and dim/disable action buttons (except “Preview”) to reinforce the state.

// If you keep SOLD:
const getStockPill = (quantity: number, sold?: boolean) => {
  if (sold || quantity === 0) {
    return (
      <span className="rounded-full bg-red-100 px-2.5 py-1 text-xs font-semibold text-red-800">
        {sold ? 'SOLD' : 'OUT OF STOCK'}
      </span>
    );
  }
  if (quantity < 10) return <span className="rounded-full bg-amber-100 px-2.5 py-1 text-xs font-semibold text-amber-800">LOW STOCK</span>;
  return <span className="rounded-full bg-emerald-100 px-2.5 py-1 text-xs font-semibold text-emerald-800">IN STOCK</span>;
};


And when quantity===0, add a subtle grayscale/opacity layer on the image container and set pointer-events: none; opacity: .6 on non-preview CTAs.

3) Copy consistency (same tone everywhere)

Success:

Duplicate → “Product duplicated” / Created copy of "<name>".

Delete → “Product deleted” / The product was removed.

Mark as sold → “Marked as sold” / "<name>" is no longer available.

Error (shared): title Could not <action> + description Please try again.

4) Keep everything else as-is

Please don’t change product card content, filters, icons, or layout/styling beyond the small status-pill/color tweaks above.