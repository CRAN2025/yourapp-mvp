// bootstrap.ts
import { db, auth } from '@/lib/firebase';
import {
  doc, collection, serverTimestamp, runTransaction
} from 'firebase/firestore';

// Helper to build initial docs
const now = serverTimestamp();

export async function ensureBootstrap(uid: string) {
  return runTransaction(db, async (tx) => {
    // ----- READS (no writes here!) -----------------------------------------
    const profileRef = doc(db, 'profiles', uid);
    const obRef      = doc(db, 'onboarding', uid);

    const profileSnap = await tx.get(profileRef);
    const obSnap      = await tx.get(obRef);

    let storeId: string | null = null;
    let needCreateStore = false;
    let needCreateOnboarding = false;
    let needCreateProfile = !profileSnap.exists();

    if (obSnap.exists()) {
      const ob = obSnap.data() as any;
      storeId = ob.storeId ?? null;

      // If onboarding exists but points to a missing store, we’ll create it below.
      if (!storeId) needCreateStore = true;
      else {
        const storeRef = doc(db, 'stores', storeId);
        const storeSnap = await tx.get(storeRef);    // still a READ (allowed)
        if (!storeSnap.exists()) needCreateStore = true;
      }
    } else {
      // No onboarding yet: we’ll create both store + onboarding
      needCreateOnboarding = true;
      needCreateStore = true;
    }

    // ----- WRITES (all after every read has finished) -----------------------
    if (needCreateProfile) {
      tx.set(profileRef, {
        uid,
        email: auth.currentUser?.email ?? '',
        createdAt: now,
      });
    }

    if (needCreateStore) {
      const storeRef = doc(collection(db, 'stores')); // new id
      storeId = storeRef.id;
      tx.set(storeRef, {
        ownerUid: uid,
        status: 'draft',
        name: '',
        createdAt: now,
      });
    }

    if (needCreateOnboarding) {
      // If we created a store above, storeId is set. If onboarding existed, we keep its storeId.
      tx.set(obRef, {
        storeId,
        currentStep: 1,
        completed: [],   // IMPORTANT: empty means step 1 is NOT complete
        updatedAt: now,
      });
    }

    // If onboarding existed AND didn’t include storeId (rare), patch it now
    if (obSnap.exists() && !obSnap.data().storeId && storeId) {
      tx.update(obRef, { storeId, updatedAt: now });
    }

    // Build progress to return
    const progress = obSnap.exists()
      ? obSnap.data()
      : { storeId, currentStep: 1, completed: [] };

    return { storeId, progress };
  });
}
